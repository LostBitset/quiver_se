syntax = "proto3";
package eidin;

option go_package = "LostBitset/quiver_se/EIDIN/proto_lib";

// Analyze the target program on any input (random or predefined).
// Direction: Orchestration Process -> Analyzer Process
message AnalyzeAny {

    // Whether or not sending this message multiple times is not allowed to just yield a
    // cached result.
    // Note that if this value is false, sending this message (AnalyzeAny) more than once
    // breaks the spec.
    bool forbid_caching = 1;

}

// Analyze the target program in accordance with a particular model.
// Direction: Orchestration Process -> Analyzer Process
message AnalyzeModel {

    // Whether or not sending this message multiple times is not allowed to just yield a
    // cached result.
    bool forbid_caching = 1;

    // The model, in accordance with the constraint format specified in SessionInit.
    string model = 2;

}

// Provides the returned path condition (analysis results).
// Direction: Analyzer Process -> Orchestration Process
message PathCondition {

    // Free functions that make up the SMT query.
    repeated SMTFreeFun free_funs = 1;

    // The segmented path condition.
    repeated PathConditionSegment segmented_pc = 2;

}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a "free fun" in an SMT constraint set.
message SMTFreeFun {

    // The name of the fun.
    string name = 1;
    
    // The sorts of the arguments, which should be empty if it's just a normal value.
    repeated string arg_sorts = 2;
    
    // The sort of the (return) value.
    string ret_sort = 3;

}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a segment of a path condition, divided in accordance with callback transitions.
message PathConditionSegment {

    // A unique identifier for the callback this segment refers to.
    CallbackId this_callback_id = 1;
    
    // A unique identifier for the callback this segment continues on to.
    optional CallbackId next_callback_id = 2;
    
    // The actual constraint set that makes up this part of the query
    repeated SMTConstraint partial_pc = 3;

}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a constraint that forms a part of the query given to an SMT solver.
message SMTConstraint {

    // The constraint as a string.
    string constraint = 1;
    
    // If this is an assertion, whether it should be true or false.
    // Otherwise, don't set this field.
    optional bool assertion_value = 2;

}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a unique identifier for a particular callback
message CallbackId {
    
    // The (byte) offset in the original file of the start of the callback source.
    uint64 bytes_start = 1;

    // The (byte) offset in the original file of the end of the callback source.
    uint64 bytes_end = 2;

}
