// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: eidin.proto

package proto_lib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The format used for constraints / SMT queries.
// Keep in mind that complete queries are never sent as a part of this protocol.
type SessionInit_ConstraintFormat int32

const (
	SessionInit_SMTLIB_V2  SessionInit_ConstraintFormat = 0
	SessionInit_SMTLIB_2VA SessionInit_ConstraintFormat = 1
	SessionInit_OTHER      SessionInit_ConstraintFormat = 2
)

// Enum value maps for SessionInit_ConstraintFormat.
var (
	SessionInit_ConstraintFormat_name = map[int32]string{
		0: "SMTLIB_V2",
		1: "SMTLIB_2VA",
		2: "OTHER",
	}
	SessionInit_ConstraintFormat_value = map[string]int32{
		"SMTLIB_V2":  0,
		"SMTLIB_2VA": 1,
		"OTHER":      2,
	}
)

func (x SessionInit_ConstraintFormat) Enum() *SessionInit_ConstraintFormat {
	p := new(SessionInit_ConstraintFormat)
	*p = x
	return p
}

func (x SessionInit_ConstraintFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionInit_ConstraintFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_eidin_proto_enumTypes[0].Descriptor()
}

func (SessionInit_ConstraintFormat) Type() protoreflect.EnumType {
	return &file_eidin_proto_enumTypes[0]
}

func (x SessionInit_ConstraintFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionInit_ConstraintFormat.Descriptor instead.
func (SessionInit_ConstraintFormat) EnumDescriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{0, 0}
}

// Start a new session, describes important operation parameters and target.
// Direction: Orchestration Process -> Analyzer Process
type SessionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The EIDIN version number, the first of which is "0.1"
	EidinVersion string `protobuf:"bytes,1,opt,name=eidin_version,json=eidinVersion,proto3" json:"eidin_version,omitempty"`
	// Target Program URI
	// It is entirely up to the implementation what to support.
	// Some may support only file:// URIs, others may not support them at all.
	// The spec requires that this is a valid URI, in accordance with RFC 3986.
	TargetUri string `protobuf:"bytes,2,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// If the ConstraintFormat was OTHER, you should specify what it is.
	// Failure to do this is not breaking the spec, but is highly discouraged.
	// For very limited testing or trial environments, this is allowed, but it should
	// never be used in a complex or production environment. Think of this case as
	// sending "unspecified".
	// *HOWEVER*, setting this when ConstraintFormat is not OTHER, *DOES* constitute
	// breaking the spec.
	ConstraintFormatOther *string `protobuf:"bytes,3,opt,name=constraint_format_other,json=constraintFormatOther,proto3,oneof" json:"constraint_format_other,omitempty"`
}

func (x *SessionInit) Reset() {
	*x = SessionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInit) ProtoMessage() {}

func (x *SessionInit) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInit.ProtoReflect.Descriptor instead.
func (*SessionInit) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{0}
}

func (x *SessionInit) GetEidinVersion() string {
	if x != nil {
		return x.EidinVersion
	}
	return ""
}

func (x *SessionInit) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *SessionInit) GetConstraintFormatOther() string {
	if x != nil && x.ConstraintFormatOther != nil {
		return *x.ConstraintFormatOther
	}
	return ""
}

// Analyze the target program on any input (random or predefined).
// Direction: Orchestration Process -> Analyzer Process
type AnalyzeAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not sending this message multiple times is not allowed to just yield a
	// cached result.
	// Note that if this value is false, sending this message (AnalyzeAny) more than once
	// breaks the spec.
	ForbidCaching bool `protobuf:"varint,1,opt,name=forbid_caching,json=forbidCaching,proto3" json:"forbid_caching,omitempty"`
}

func (x *AnalyzeAny) Reset() {
	*x = AnalyzeAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAny) ProtoMessage() {}

func (x *AnalyzeAny) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAny.ProtoReflect.Descriptor instead.
func (*AnalyzeAny) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeAny) GetForbidCaching() bool {
	if x != nil {
		return x.ForbidCaching
	}
	return false
}

// Analyze the target program in accordance with a particular model.
// Direction: Orchestration Process -> Analyzer Process
type AnalyzeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not sending this message multiple times is not allowed to just yield a
	// cached result.
	ForbidCaching bool `protobuf:"varint,1,opt,name=forbid_caching,json=forbidCaching,proto3" json:"forbid_caching,omitempty"`
	// The model, in accordance with the constraint format specified in SessionInit.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *AnalyzeModel) Reset() {
	*x = AnalyzeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeModel) ProtoMessage() {}

func (x *AnalyzeModel) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeModel.ProtoReflect.Descriptor instead.
func (*AnalyzeModel) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeModel) GetForbidCaching() bool {
	if x != nil {
		return x.ForbidCaching
	}
	return false
}

func (x *AnalyzeModel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Provides the returned path condition (analysis results).
// Direction: Analyzer Process -> Orchestration Process
type PathCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free functions that make up the SMT query.
	FreeFuns []*SMTFreeFun `protobuf:"bytes,1,rep,name=free_funs,json=freeFuns,proto3" json:"free_funs,omitempty"`
	// The segmented path condition.
	SegmentedPc []*PathConditionSegment `protobuf:"bytes,2,rep,name=segmented_pc,json=segmentedPc,proto3" json:"segmented_pc,omitempty"`
}

func (x *PathCondition) Reset() {
	*x = PathCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathCondition) ProtoMessage() {}

func (x *PathCondition) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathCondition.ProtoReflect.Descriptor instead.
func (*PathCondition) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{3}
}

func (x *PathCondition) GetFreeFuns() []*SMTFreeFun {
	if x != nil {
		return x.FreeFuns
	}
	return nil
}

func (x *PathCondition) GetSegmentedPc() []*PathConditionSegment {
	if x != nil {
		return x.SegmentedPc
	}
	return nil
}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a "free fun" in an SMT constraint set.
type SMTFreeFun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the fun.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The sorts of the arguments, which should be empty if it's just a normal value.
	ArgSorts []string `protobuf:"bytes,2,rep,name=arg_sorts,json=argSorts,proto3" json:"arg_sorts,omitempty"`
	// The sort of the (return) value.
	RetSort string `protobuf:"bytes,3,opt,name=ret_sort,json=retSort,proto3" json:"ret_sort,omitempty"`
}

func (x *SMTFreeFun) Reset() {
	*x = SMTFreeFun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTFreeFun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTFreeFun) ProtoMessage() {}

func (x *SMTFreeFun) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTFreeFun.ProtoReflect.Descriptor instead.
func (*SMTFreeFun) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{4}
}

func (x *SMTFreeFun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SMTFreeFun) GetArgSorts() []string {
	if x != nil {
		return x.ArgSorts
	}
	return nil
}

func (x *SMTFreeFun) GetRetSort() string {
	if x != nil {
		return x.RetSort
	}
	return ""
}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a segment of a path condition, divided in accordance with callback transitions.
type PathConditionSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the callback this segment refers to.
	ThisCallbackId *CallbackId `protobuf:"bytes,1,opt,name=this_callback_id,json=thisCallbackId,proto3" json:"this_callback_id,omitempty"`
	// A unique identifier for the callback this segment continues on to.
	NextCallbackId *CallbackId `protobuf:"bytes,2,opt,name=next_callback_id,json=nextCallbackId,proto3" json:"next_callback_id,omitempty"`
	// The actual constraint set that makes up this part of the query
	PartialPc []*SMTConstraint `protobuf:"bytes,3,rep,name=partial_pc,json=partialPc,proto3" json:"partial_pc,omitempty"`
}

func (x *PathConditionSegment) Reset() {
	*x = PathConditionSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathConditionSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathConditionSegment) ProtoMessage() {}

func (x *PathConditionSegment) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathConditionSegment.ProtoReflect.Descriptor instead.
func (*PathConditionSegment) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{5}
}

func (x *PathConditionSegment) GetThisCallbackId() *CallbackId {
	if x != nil {
		return x.ThisCallbackId
	}
	return nil
}

func (x *PathConditionSegment) GetNextCallbackId() *CallbackId {
	if x != nil {
		return x.NextCallbackId
	}
	return nil
}

func (x *PathConditionSegment) GetPartialPc() []*SMTConstraint {
	if x != nil {
		return x.PartialPc
	}
	return nil
}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a constraint that forms a part of the query given to an SMT solver.
type SMTConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The constraint as a string.
	Constraint string `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// If this is an assertion, whether it should be true or false.
	// Otherwise, don't set this field.
	AssertionValue *bool `protobuf:"varint,2,opt,name=assertion_value,json=assertionValue,proto3,oneof" json:"assertion_value,omitempty"`
}

func (x *SMTConstraint) Reset() {
	*x = SMTConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTConstraint) ProtoMessage() {}

func (x *SMTConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTConstraint.ProtoReflect.Descriptor instead.
func (*SMTConstraint) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{6}
}

func (x *SMTConstraint) GetConstraint() string {
	if x != nil {
		return x.Constraint
	}
	return ""
}

func (x *SMTConstraint) GetAssertionValue() bool {
	if x != nil && x.AssertionValue != nil {
		return *x.AssertionValue
	}
	return false
}

// NOT AN ACTUAL MESSAGE, just a component of one.
// Represents a unique identifier for a particular callback
type CallbackId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The (byte) offset in the original file of the start of the callback source.
	BytesStart uint64 `protobuf:"varint,1,opt,name=bytes_start,json=bytesStart,proto3" json:"bytes_start,omitempty"`
	// The (byte) offset in the original file of the end of the callback source.
	BytesEnd uint64 `protobuf:"varint,2,opt,name=bytes_end,json=bytesEnd,proto3" json:"bytes_end,omitempty"`
}

func (x *CallbackId) Reset() {
	*x = CallbackId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eidin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackId) ProtoMessage() {}

func (x *CallbackId) ProtoReflect() protoreflect.Message {
	mi := &file_eidin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackId.ProtoReflect.Descriptor instead.
func (*CallbackId) Descriptor() ([]byte, []int) {
	return file_eidin_proto_rawDescGZIP(), []int{7}
}

func (x *CallbackId) GetBytesStart() uint64 {
	if x != nil {
		return x.BytesStart
	}
	return 0
}

func (x *CallbackId) GetBytesEnd() uint64 {
	if x != nil {
		return x.BytesEnd
	}
	return 0
}

var File_eidin_proto protoreflect.FileDescriptor

var file_eidin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x69, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65,
	0x69, 0x64, 0x69, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x69, 0x64, 0x69, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x69, 0x64,
	0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x3c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x54,
	0x4c, 0x49, 0x42, 0x5f, 0x56, 0x32, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4d, 0x54, 0x4c,
	0x49, 0x42, 0x5f, 0x32, 0x56, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22,
	0x33, 0x0a, 0x0a, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x41, 0x6e, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x22, 0x4b, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x7f, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x64, 0x69, 0x6e, 0x2e, 0x53, 0x4d,
	0x54, 0x46, 0x72, 0x65, 0x65, 0x46, 0x75, 0x6e, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x46, 0x75,
	0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x64, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x50, 0x63, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x4d, 0x54, 0x46, 0x72, 0x65, 0x65, 0x46, 0x75, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x67, 0x53, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xc5, 0x01, 0x0a,
	0x14, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x10, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x69, 0x64, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x69, 0x64, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x63, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x64, 0x69, 0x6e, 0x2e, 0x53, 0x4d, 0x54, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x63, 0x22, 0x71, 0x0a, 0x0d, 0x53, 0x4d, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x64, 0x42, 0x26, 0x5a, 0x24, 0x4c, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x74, 0x73, 0x65,
	0x74, 0x2f, 0x71, 0x75, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x2f, 0x45, 0x49, 0x44, 0x49,
	0x4e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_eidin_proto_rawDescOnce sync.Once
	file_eidin_proto_rawDescData = file_eidin_proto_rawDesc
)

func file_eidin_proto_rawDescGZIP() []byte {
	file_eidin_proto_rawDescOnce.Do(func() {
		file_eidin_proto_rawDescData = protoimpl.X.CompressGZIP(file_eidin_proto_rawDescData)
	})
	return file_eidin_proto_rawDescData
}

var file_eidin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eidin_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_eidin_proto_goTypes = []interface{}{
	(SessionInit_ConstraintFormat)(0), // 0: eidin.SessionInit.ConstraintFormat
	(*SessionInit)(nil),               // 1: eidin.SessionInit
	(*AnalyzeAny)(nil),                // 2: eidin.AnalyzeAny
	(*AnalyzeModel)(nil),              // 3: eidin.AnalyzeModel
	(*PathCondition)(nil),             // 4: eidin.PathCondition
	(*SMTFreeFun)(nil),                // 5: eidin.SMTFreeFun
	(*PathConditionSegment)(nil),      // 6: eidin.PathConditionSegment
	(*SMTConstraint)(nil),             // 7: eidin.SMTConstraint
	(*CallbackId)(nil),                // 8: eidin.CallbackId
}
var file_eidin_proto_depIdxs = []int32{
	5, // 0: eidin.PathCondition.free_funs:type_name -> eidin.SMTFreeFun
	6, // 1: eidin.PathCondition.segmented_pc:type_name -> eidin.PathConditionSegment
	8, // 2: eidin.PathConditionSegment.this_callback_id:type_name -> eidin.CallbackId
	8, // 3: eidin.PathConditionSegment.next_callback_id:type_name -> eidin.CallbackId
	7, // 4: eidin.PathConditionSegment.partial_pc:type_name -> eidin.SMTConstraint
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_eidin_proto_init() }
func file_eidin_proto_init() {
	if File_eidin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eidin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTFreeFun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathConditionSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eidin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eidin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_eidin_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eidin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eidin_proto_goTypes,
		DependencyIndexes: file_eidin_proto_depIdxs,
		EnumInfos:         file_eidin_proto_enumTypes,
		MessageInfos:      file_eidin_proto_msgTypes,
	}.Build()
	File_eidin_proto = out.File
	file_eidin_proto_rawDesc = nil
	file_eidin_proto_goTypes = nil
	file_eidin_proto_depIdxs = nil
}
