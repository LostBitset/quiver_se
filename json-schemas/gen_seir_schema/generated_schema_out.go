// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genseirschema

type QseDseOutSchemaJson struct {
	// The formats or languages used
	Languages *QseDseOutSchemaJsonLanguages `json:"languages,omitempty" yaml:"languages,omitempty"`

	// All of the conditions collected as necessary for the path followed
	SegmentedPathCondition []QseDseOutSchemaJsonSegmentedPathConditionElem `json:"segmented_path_condition,omitempty" yaml:"segmented_path_condition,omitempty"`
}

// The formats or languages used
type QseDseOutSchemaJsonLanguages struct {
	// The format or language used to encode SMT constraints
	Smt *string `json:"smt,omitempty" yaml:"smt,omitempty"`
}

// A segment of the path condition corresponding to one callback
type QseDseOutSchemaJsonSegmentedPathConditionElem struct {
	// The callback for this segment
	Callback interface{} `json:"callback,omitempty" yaml:"callback,omitempty"`

	// A segment of the overall path condition
	PathConditionSegment []QseDseOutSchemaJsonSegmentedPathConditionElemPathConditionSegmentElem `json:"path_condition_segment,omitempty" yaml:"path_condition_segment,omitempty"`
}

// A condition in SMT and whether it was followed
type QseDseOutSchemaJsonSegmentedPathConditionElemPathConditionSegmentElem struct {
	// The condition as an SMT expression
	Constraint *string `json:"constraint,omitempty" yaml:"constraint,omitempty"`

	// What the condition evaluated to
	FollowedValue *bool `json:"followed_value,omitempty" yaml:"followed_value,omitempty"`
}
